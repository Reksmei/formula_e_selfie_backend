# -*- coding: utf-8 -*-
"""Formula E Selfie Flask Web Server

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nbxRhYtrI9EgGTB_nTbLYjPkpsefKk5z
"""

import base64
from flask import Flask, request, jsonify
from flask_cors import CORS
from werkzeug.utils import secure_filename

# Import the new client functions
from vertex_ai_client import generate_image, generate_video

# --- Flask App Initialization ---
app = Flask(__name__)
CORS(app)

# --- API Endpoints ---
@app.route("/generate", methods=["POST"])
def handle_generate_image():
    """Handles the initial image generation request."""
    print("Received request on /generate")
    if 'image' not in request.files:
        return jsonify({"error": "No image file provided."}), 400

    prompt = request.form.get('prompt')
    if not prompt:
        return jsonify({"error": "No prompt provided."}), 400

    image_file = request.files['image']
    filename = secure_filename(image_file.filename)
    print(f"Processing image: {filename} with prompt: '{prompt[:30]}...'")

    try:
        image_bytes = image_file.read()
        mime_type = image_file.mimetype

        # Call the refactored function from the client
        result = generate_image(prompt, image_bytes, mime_type)

        base64_data = base64.b64encode(result["data"]).decode('utf-8')
        image_data_url = f"data:{result['mime_type']};base64,{base64_data}"

        print("Successfully generated image. Sending response to client.")
        return jsonify({"imageData": image_data_url})

    except Exception as e:
        print(f"An error occurred during image generation: {e}")
        if "safety" in str(e).lower():
            return jsonify({"error": "Image generation failed due to safety filters."}), 500
        else:
            return jsonify({"error": f"An internal server error occurred: {e}"}), 500

@app.route("/generate-video", methods=["POST"])
def handle_generate_video():
    """Handles the video generation request from a previously generated image."""
    print("Received request on /generate-video")
    data = request.get_json()
    if not data or 'imageData' not in data or 'prompt' not in data:
        return jsonify({"error": "Missing imageData or prompt in request body."}), 400

    image_data_url = data['imageData']
    prompt = data['prompt']
    print(f"Processing video request with prompt: '{prompt[:30]}...'")

    try:
        # Decode the base64 data URL from the request back into bytes
        header, encoded = image_data_url.split(',', 1)
        mime_type = header.split(';')[0].split(':')[1]
        image_bytes = base64.b64decode(encoded)

        # Call the new video generation function from the client
        result = generate_video(prompt, image_bytes, mime_type)

        base64_data = base64.b64encode(result["data"]).decode('utf-8')
        video_data_url = f"data:{result['mime_type']};base64,{base64_data}"

        print("Successfully generated video. Sending response to client.")
        return jsonify({"videoData": video_data_url})

    except Exception as e:
        print(f"An error occurred during video generation: {e}")
        if "safety" in str(e).lower():
            return jsonify({"error": "Video generation failed due to safety filters."}), 500
        else:
            return jsonify({"error": f"An internal server error occurred: {e}"}), 500


# --- Server Start ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)