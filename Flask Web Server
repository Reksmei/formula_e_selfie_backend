{"cells":[{"cell_type":"code","source":["import base64\n","from flask import Flask, request, jsonify\n","from flask_cors import CORS\n","from werkzeug.utils import secure_filename\n","\n","# Import the new client functions\n","from vertex_ai_client import generate_image, generate_video\n","\n","# --- Flask App Initialization ---\n","app = Flask(__name__)\n","CORS(app)\n","\n","# --- API Endpoints ---\n","@app.route(\"/generate\", methods=[\"POST\"])\n","def handle_generate_image():\n","    \"\"\"Handles the initial image generation request.\"\"\"\n","    print(\"Received request on /generate\")\n","    if 'image' not in request.files:\n","        return jsonify({\"error\": \"No image file provided.\"}), 400\n","\n","    prompt = request.form.get('prompt')\n","    if not prompt:\n","        return jsonify({\"error\": \"No prompt provided.\"}), 400\n","\n","    image_file = request.files['image']\n","    filename = secure_filename(image_file.filename)\n","    print(f\"Processing image: {filename} with prompt: '{prompt[:30]}...'\")\n","\n","    try:\n","        image_bytes = image_file.read()\n","        mime_type = image_file.mimetype\n","\n","        # Call the refactored function from the client\n","        result = generate_image(prompt, image_bytes, mime_type)\n","\n","        base64_data = base64.b64encode(result[\"data\"]).decode('utf-8')\n","        image_data_url = f\"data:{result['mime_type']};base64,{base64_data}\"\n","\n","        print(\"Successfully generated image. Sending response to client.\")\n","        return jsonify({\"imageData\": image_data_url})\n","\n","    except Exception as e:\n","        print(f\"An error occurred during image generation: {e}\")\n","        if \"safety\" in str(e).lower():\n","            return jsonify({\"error\": \"Image generation failed due to safety filters.\"}), 500\n","        else:\n","            return jsonify({\"error\": f\"An internal server error occurred: {e}\"}), 500\n","\n","@app.route(\"/generate-video\", methods=[\"POST\"])\n","def handle_generate_video():\n","    \"\"\"Handles the video generation request from a previously generated image.\"\"\"\n","    print(\"Received request on /generate-video\")\n","    data = request.get_json()\n","    if not data or 'imageData' not in data or 'prompt' not in data:\n","        return jsonify({\"error\": \"Missing imageData or prompt in request body.\"}), 400\n","\n","    image_data_url = data['imageData']\n","    prompt = data['prompt']\n","    print(f\"Processing video request with prompt: '{prompt[:30]}...'\")\n","\n","    try:\n","        # Decode the base64 data URL from the request back into bytes\n","        header, encoded = image_data_url.split(',', 1)\n","        mime_type = header.split(';')[0].split(':')[1]\n","        image_bytes = base64.b64decode(encoded)\n","\n","        # Call the new video generation function from the client\n","        result = generate_video(prompt, image_bytes, mime_type)\n","\n","        base64_data = base64.b64encode(result[\"data\"]).decode('utf-8')\n","        video_data_url = f\"data:{result['mime_type']};base64,{base64_data}\"\n","\n","        print(\"Successfully generated video. Sending response to client.\")\n","        return jsonify({\"videoData\": video_data_url})\n","\n","    except Exception as e:\n","        print(f\"An error occurred during video generation: {e}\")\n","        if \"safety\" in str(e).lower():\n","            return jsonify({\"error\": \"Video generation failed due to safety filters.\"}), 500\n","        else:\n","            return jsonify({\"error\": f\"An internal server error occurred: {e}\"}), 500\n","\n","# --- Server Start ---\n","if __name__ == \"__main__\":\n","    app.run(host=\"0.0.0.0\", port=5000, debug=True)"],"outputs":[],"execution_count":null,"metadata":{"id":"F5cen8xIMZLL"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}