{"cells":[{"cell_type":"code","source":["import os\n","import vertexai\n","from vertexai.generative_models import GenerativeModel, Part\n","\n","# --- Configuration ---\n","PROJECT_ID = os.environ.get(\"formula-e-selfie\")\n","LOCATION = os.environ.get(\"GCP_LOCATION\", \"us-central1\")\n","IMAGE_MODEL_ID = \"gemini-2.5-flash-image\"\n","# Using a realistic, available model name for video generation.\n","VIDEO_MODEL_ID = \"veo-2.0-generate-001\"\n","\n","# --- Vertex AI Initialization ---\n","# This block will run once when the module is imported.\n","try:\n","    vertexai.init(project=PROJECT_ID, location=LOCATION)\n","    image_model = GenerativeModel(IMAGE_MODEL_ID)\n","    video_model = GenerativeModel(VIDEO_MODEL_ID)\n","    print(f\"Vertex AI initialized for project '{PROJECT_ID}' in location '{LOCATION}'\")\n","except Exception as e:\n","    print(f\"Error initializing Vertex AI: {e}\")\n","    # You might want to handle this more gracefully depending on your application's needs\n","    image_model = None\n","    video_model = None\n","\n","def generate_image(prompt_text: str, image_bytes: bytes, mime_type: str) -> dict:\n","    \"\"\"Generates an image using Vertex AI.\"\"\"\n","    if not image_model:\n","        raise ConnectionError(\"Vertex AI image model is not initialized.\")\n","\n","    print(\"Calling Vertex AI for image generation...\")\n","    image_part = Part.from_data(data=image_bytes, mime_type=mime_type)\n","    prompt_part = Part.from_text(prompt_text)\n","\n","    response = image_model.generate_content(\n","        [prompt_part, image_part],\n","        generation_config={\"response_mime_type\": \"image/png\"}\n","    )\n","\n","    print(\"Received image response from Vertex AI.\")\n","    if not response.candidates:\n","        raise ValueError(\"API did not return a valid candidate for the image.\")\n","\n","    generated_image_part = response.candidates[0].content.parts[0]\n","\n","    if generated_image_part.mime_type not in [\"image/png\", \"image/jpeg\"]:\n","        raise TypeError(\"Did not receive an image from the API.\")\n","\n","    return {\n","        \"data\": generated_image_part.data,\n","        \"mime_type\": generated_image_part.mime_type\n","    }\n","\n","def generate_video(prompt_text: str, image_bytes: bytes, mime_type: str) -> dict:\n","    \"\"\"Generates a video from an image using Vertex AI.\"\"\"\n","    if not video_model:\n","        raise ConnectionError(\"Vertex AI video model is not initialized.\")\n","\n","    print(\"Calling Vertex AI for video generation...\")\n","    image_part = Part.from_data(data=image_bytes, mime_type=mime_type)\n","    # Adding more context to the prompt can help guide the video model\n","    video_prompt = f\"Create a short, 4-second video with subtle motion, based on this image. {prompt_text}\"\n","    prompt_part = Part.from_text(video_prompt)\n","\n","    response = video_model.generate_content(\n","        [prompt_part, image_part],\n","        generation_config={\"response_mime_type\": \"video/mp4\"}\n","    )\n","\n","    print(\"Received video response from Vertex AI.\")\n","    if not response.candidates:\n","        raise ValueError(\"API did not return a valid candidate for the video.\")\n","\n","    generated_video_part = response.candidates[0].content.parts[0]\n","\n","    if \"video\" not in generated_video_part.mime_type:\n","         raise TypeError(f\"Did not receive video from the API. Got {generated_video_part.mime_type}\")\n","\n","    return {\n","        \"data\": generated_video_part.data,\n","        \"mime_type\": generated_video_part.mime_type\n","    }\n"],"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'flask_cors'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-148552573.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mbase64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflask\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mFlask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjsonify\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mflask_cors\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCORS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mwerkzeug\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msecure_filename\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'flask_cors'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"ZZYJQP-rDtZQ","executionInfo":{"status":"error","timestamp":1759680849632,"user_tz":-60,"elapsed":788,"user":{"displayName":"Reksmei Arkadiusz-Davidavic","userId":"03791491797781055728"}},"outputId":"b65a5d06-38b6-4489-a45d-7c871d0a0574"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}